/*
 * Copyright 2017-present Open Networking Laboratory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.onosproject.slsnet;

import com.google.common.collect.Sets;
import org.apache.felix.scr.annotations.Activate;
import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Deactivate;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.ReferenceCardinality;
import org.onlab.util.Tools;
import org.onosproject.core.ApplicationId;
import org.onosproject.core.CoreService;
import org.onosproject.incubator.net.intf.Interface;
import org.onosproject.net.Host;
import org.onosproject.net.host.HostService;
import org.onosproject.net.intent.Intent;
import org.onosproject.net.intent.IntentEvent;
import org.onosproject.net.intent.IntentException;
import org.onosproject.net.intent.IntentListener;
import org.onosproject.net.intent.IntentService;
import org.onosproject.net.intent.IntentUtils;
import org.onosproject.net.intent.Key;
import org.onosproject.net.intent.MultiPointToSinglePointIntent;
import org.onosproject.net.intent.SinglePointToMultiPointIntent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collection;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.onlab.util.Tools.groupedThreads;

/**
 * An implementation of L2NetworkOperationService.
 * Handles the execution order of the L2 Network operations generated by the
 * application.
 */
@Component(immediate = true, enabled = false)
public class SlsNetL2NetworkRouting {

    private static final int COMPLETE_TIMEOUT_SEC = 5;

    private final Logger log = LoggerFactory.getLogger(getClass());
    protected ApplicationId l2NetAppId;

    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    protected CoreService coreService;

    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    protected IntentService intentService;

    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    protected HostService hostService;

    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)
    protected SlsNetService slsnet;

    protected ScheduledExecutorService schedulerExecutor;

    @Activate
    public void activate() {
        l2NetAppId = coreService.registerApplication(slsnet.L2NETWORK_APP_ID);
        log.info("slsnet l2network routing starting with l2net app id {}", l2NetAppId.toString());

        // A single thread pool for L2NetworkOperationScheduler
        schedulerExecutor = Executors.newScheduledThreadPool(1,
                                            groupedThreads("onos/apps/slsnet", "scheduler-%d", log));
        // Start the scheduler
        schedulerExecutor.scheduleAtFixedRate(new L2NetworkUpdate(),
                                            0, 500, TimeUnit.MILLISECONDS);

        log.info("slsnet l2network started");
    }

    @Deactivate
    public void deactivate() {
        log.info("slsnet l2network routing stopping");

        schedulerExecutor.shutdown();

        for (Intent intent : intentService.getIntents()) {
            if (intent.appId().equals(l2NetAppId)) {
                intentService.withdraw(intent);
            }
        }
        for (Intent intent : intentService.getIntents()) {
            if (intent.appId().equals(l2NetAppId)) {
                intentService.purge(intent);
            }
        }

        log.info("slsnet l2network routing stopped");
    }

    /**
     * Scheduler for L2Network Refresh operation.
     */
    class L2NetworkUpdate implements Runnable {

        @Override
        public void run() {
            for (L2Network l2Network : slsnet.getL2Networks()) {
                if (l2Network.dirty()) {
                    log.info("slsnet l2network routing update for dirty flag: {}", l2Network.name());
                    l2Network.setDirty(false);
                    updateL2NetworkIntents(l2Network);
                }
            }
            // TODO: MAY NEED TO DO REMOVES FIRST AND DO INSTALLS NEXT FOR ALL L2NETWORK INTENTS
        }

        /**
         * Updates Intents of the L2Networks.
         */
        private void updateL2NetworkIntents(L2Network l2Network) {
            // check which part we need to update
            // if we update host only, we don't need to reinstall
            // every Intents
            Set<Intent> intentsToInstall = Sets.newHashSet();
            Set<Intent> intentsToUninstall = Sets.newHashSet();
            Set<Intent> currentIntents = getCurrentIntents(l2Network);

            // Compares broadcast Intents
            Set<Intent> currentBrcIntents = currentIntents.stream()
                    .filter(intent -> intent instanceof SinglePointToMultiPointIntent)
                    .collect(Collectors.toSet());
            Set<Intent> targetBrcIntents = SlsNetL2NetworkIntent.buildBrcIntents(l2Network, l2NetAppId);
            if (!intentSetEquals(currentBrcIntents, targetBrcIntents)) {
                // If broadcast Intents changes, it means some network
                // interfaces or encapsulation constraint changed; Need to
                // reinstall all intents
                log.info("slsnet l2network routing reinistall all intents");
                removeL2NetworkIntents(l2Network);
                installL2NetworkIntents(l2Network);
                return;
            }
           log.info("slsnet l2network routing update intents");

            // Compares unicast Intents
            Set<Intent> currentUniIntents = currentIntents.stream()
                    .filter(intent -> intent instanceof MultiPointToSinglePointIntent)
                    .collect(Collectors.toSet());
            Set<Intent> targetUniIntents = SlsNetL2NetworkIntent.buildUniIntents(l2Network,
                                                                     hostsFromL2Network(l2Network), l2NetAppId);

            // New unicast Intents to install
            targetUniIntents.forEach(intent -> {
                if (!currentUniIntents.contains(intent)) {
                    intentsToInstall.add(intent);
                }
            });

            // Old unicast Intents to remove
            currentUniIntents.forEach(intent -> {
                if (!targetUniIntents.contains(intent)) {
                    intentsToUninstall.add(intent);
                }
            });
            applyIntentsRemoveSync(intentsToUninstall);
            applyIntentsAddSync(intentsToInstall);
        }

        private Set<Host> hostsFromL2Network(L2Network l2Network) {
            Set<Interface> interfaces = l2Network.interfaces();
            return interfaces.stream()
                    .map(this::hostsFromInterface)
                    .flatMap(Collection::stream)
                    .collect(Collectors.toSet());
        }

        private Set<Host> hostsFromInterface(Interface iface) {
            return hostService.getConnectedHosts(iface.connectPoint())
                    .stream()
                    .filter(host -> host.vlan().equals(iface.vlan()))
                    .collect(Collectors.toSet());
        }

        /**
         * Applies Intents synchronously with a specific direction.
         *
         * @param intents the Intents
         * @param direction the direction
         */
        private void applyIntentsAddSync(Set<Intent> intents) {
            Set<Key> pendingIntentKeys = intents.stream()
                    .map(Intent::key).collect(Collectors.toSet());
            IntentCompleter completer;
            completer = new IntentCompleter(pendingIntentKeys, IntentEvent.Type.INSTALLED);
            intentService.addListener(completer);
            intents.forEach(intentService::submit);
            try {
                // Wait until Intent operation completed
                completer.complete();
            } catch (Exception e) {
                log.error("slsnet applyIntentsRemoveSync error: {}", e);
            } finally {
                intentService.removeListener(completer);
            }
        }
        private void applyIntentsRemoveSync(Set<Intent> intents) {
            Set<Key> pendingIntentKeys = intents.stream()
                    .map(Intent::key).collect(Collectors.toSet());
            IntentCompleter completer;
            completer = new IntentCompleter(pendingIntentKeys, IntentEvent.Type.WITHDRAWN);
            intentService.addListener(completer);
            intents.forEach(intentService::withdraw);
            try {
                // Wait until Intent operation completed
                completer.complete();
            } catch (Exception e) {
                log.error("slsnet applyIntentsRemoveSync error: {}", e);
            } finally {
                intentService.removeListener(completer);
            }
        }

        /**
         * Checks if two sets of Intents are equal.
         *
         * @param intentSet1 the first set of Intents
         * @param intentSet2 the second set of Intents
         * @return true if both set of Intents are equal; otherwise false
         */
        private boolean intentSetEquals(Set<Intent> intentSet1, Set<Intent> intentSet2) {
            if (intentSet1.size() != intentSet2.size()) {
                return false;
            }
            for (Intent intent1 : intentSet1) {
                if (intentSet2.stream()
                        .noneMatch(intent2 -> IntentUtils.intentsAreEqual(intent1, intent2))) {
                    return false;
                }
            }
            return true;
        }

        /**
         * Retrieves installed Intents from IntentService which related to
         * specific L2 Network.
         *
         * @return the Intents which related to the L2 Network
         */
        private Set<Intent> getCurrentIntents(L2Network l2Network) {
            String l2NetworkName = l2Network.name();
            return Tools.stream(intentService.getIntents())
                    .filter(intent -> intent.key().toString().startsWith(l2NetworkName))
                    .collect(Collectors.toSet());
        }

        /**
         * Generates unicast Intents and broadcast Intents for the L2 Network.
         *
         * @return Intents for the L2 Network
         */
        private Set<Intent> generateL2NetworkIntents(L2Network l2Network) {
            Set<Intent> brcIntents = SlsNetL2NetworkIntent.buildBrcIntents(l2Network, l2NetAppId);
            Set<Intent> uniIntent = SlsNetL2NetworkIntent.buildUniIntents(l2Network,
                                                             hostsFromL2Network(l2Network), l2NetAppId);

            return Stream.concat(brcIntents.stream(), uniIntent.stream())
                    .collect(Collectors.toSet());
        }

        /**
         * Removes all Intents from the L2 Network.
         */
        private void removeL2NetworkIntents(L2Network l2Network) {
            Set<Intent> intentsToWithdraw = getCurrentIntents(l2Network);
            applyIntentsRemoveSync(intentsToWithdraw);
            intentsToWithdraw.forEach(intentService::purge);
        }

        /**
         * Installs Intents of the L2 Network.
         */
        private void installL2NetworkIntents(L2Network l2Network) {
            Set<Intent> intentsToInstall = generateL2NetworkIntents(l2Network);
            applyIntentsAddSync(intentsToInstall);
        }

        /**
         * Helper class which monitors if all Intent operations are completed.
         */
        class IntentCompleter implements IntentListener {
            private static final String INTENT_COMPILE_ERR = "Got {} from intent completer";
            private CompletableFuture<Void> completableFuture;
            private Set<Key> pendingIntentKeys;
            private IntentEvent.Type expectedEventType;

            /**
             * Initialize completer with given Intent keys and expect Intent
             * event type.
             *
             * @param pendingIntentKeys the Intent keys to wait
             * @param expectedEventType expect Intent event type
             */
            public IntentCompleter(Set<Key> pendingIntentKeys,
                                   IntentEvent.Type expectedEventType) {
                this.completableFuture = new CompletableFuture<>();
                this.pendingIntentKeys = Sets.newConcurrentHashSet(pendingIntentKeys);
                this.expectedEventType = expectedEventType;
            }

            @Override
            public void event(IntentEvent event) {
                Intent intent = event.subject();
                Key key = intent.key();
                if (!pendingIntentKeys.contains(key)) {
                    // ignore Intent events from other L2 Network
                    return;
                }
                // Intent failed, throw an exception to completable future
                if (event.type() == IntentEvent.Type.CORRUPT ||
                        event.type() == IntentEvent.Type.FAILED) {
                    completableFuture.completeExceptionally(new IntentException(intent.toString()));
                    return;
                }
                // If event type matched to expected type, remove from pending
                if (event.type() == expectedEventType) {
                    pendingIntentKeys.remove(key);
                }
                if (pendingIntentKeys.isEmpty()) {
                    completableFuture.complete(null);
                }
            }

            /**
             * Waits until all pending Intents completed ot timeout.
             */
            public void complete() {
                // If no pending Intent keys, complete directly
                if (pendingIntentKeys.isEmpty()) {
                    return;
                }
                try {
                    completableFuture.get(COMPLETE_TIMEOUT_SEC, TimeUnit.SECONDS);
                } catch (TimeoutException | InterruptedException |
                         ExecutionException | IntentException e) {
                    log.warn(INTENT_COMPILE_ERR, e.toString());
                }
            }
        }
    }

}
